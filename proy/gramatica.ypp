%{
#include <iostream>
#include <stdio.h>
#include <string>
#include <cstdlib>
using namespace std;

extern FILE *yyin;
int yylex(); 
int yyerror(const char *p) { cerr << "Error!" << endl; }
%}

//-- SYMBOL SEMANTIC VALUES -----------------------------
%union {
  int val; 
  char sym;
};
%token <val> ID CADENA ENT
%token <sym> INI END PC INT IG TMP POS OBJ AC CC MH AP CP CO TIRO PT X Y MAS MENOS POR DIV IFT ELSE DP DONE MIN MAX IMPT TO
%type  <val> S S1 D_VAR E_COND I_NOR I_POS I_OBJ I_ARR TIPO VAR VAR_NOR VAR_ARR FUNC MOV_HOR T_PAR ASI ASI_POS ASI_OBJ ASI_ARR V_VAR OP CIR CIR2 IF COND VAL CIR_LOG FOR IMP IMP2

//-- GRAMMAR RULES ---------------------------------------
%%

S: INI S1 END
S1: D_VAR S1 | E_COND S1 | OP S1 | IMP S1
D_VAR: TIPO VAR PC | I_NOR | I_POS | I_OBJ | I_ARR
I_NOR: INT VAR IG ASI PC | TMP VAR IG ASI PC
I_POS: POS VAR IG ASI POS PC
I_OBJ: OBJ VAR IG ASI_OBJ PC
I_ARR: TIPO VAR IG ASI_ARR PC
TIPO: INT | POS | OBJ | TMP
VAR: VAR_NOR | VAR_ARR
VAR_NOR: ID
VAR_ARR: ID AC ENT CC
FUNC: MOV_HOR | T_PAR
MOV_HOR: MH AP ASI_OBJ CO CP PC
T_PAR: TIRO AP ASI_OBJ CO ASI CP PC
ASI: ENT | VAR | AP ASI CP | V_VAR | OP
ASI_POS: AP ASI CO ASI CP | VAR | FUNC
ASI_OBJ: AP ASI_POS CO ASI CO ASI CO ASI CP | VAR 
ASI_ARR: ENT CO ASI_ARR | VAR CO ASI_ARR | ENT | VAR
V_VAR: ID PT X | ID PT Y
OP: ASI CIR ASI | ASI CIR2 | ASI CIR OP
CIR: MAS | MENOS | POR | DIV
CIR2: MAS MAS | MENOS MENOS
E_COND: IF | FOR
IF: IFT COND DP S1 DONE | IFT COND DP S1 ELSE DP S1 DONE 
COND: VAL CIR_LOG VAL
VAL: VAR | ENT | V_VAR
CIR_LOG: MIN | MAX | IG IG | MIN IG | MAX IG
FOR: ID TO ID DP S1 DONE | ID TO ENT DP S1 DONE
IMP: IMPT AP IMP2 CP PC
IMP2: ASI | CADENA | ASI MAS IMP2 | CADENA MAS IMP2

%%
//-- FUNCTION DEFINITIONS ---------------------------------
int main( int argc, char **argv )
{
    ++argv, --argc;     /* skip over program name */
    if ( argc > 0 )
       yyin = fopen( argv[0], "r" );
    else
       yyin = stdin;
 
  yyparse();
  return 0;
}
