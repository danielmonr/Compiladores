PARSER_BEGIN(parser_robot)

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class parser_robot {
  
  public static String s = "";

  public static void main(String args[]) throws ParseException {
    try {
      parser_robot parser = new parser_robot(new java.io.FileInputStream(args[0]));
      parser.Program();
    }
    catch(java.io.FileNotFoundException e)
    {
      System.out.println("El archivo no esta...");
    }
  }

}

PARSER_END(parser_robot)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  < SI : "Si" >
|  < V1 : "s1" >
|  < V2 : "s2" >
|  < V3 : "s3" >
|  < ENT : "entonces" >
|  < FIN : "Fin" >
|  < REP : "Repite" >
|  < VEC : "Veces" >
|  < DER : "derecha" >
|  < IZQ : "izquierda" >
|  < GIR : "gira" >
|  < RET : "retrocede" >
|  < AV : "avanza" >

}

TOKEN :
{
  < ENTERO: ["0"-"9"] (["0"-"9"])* > 
 | < MEQ: "<" > 
 | < MAQ: ">" > 
 | < DP: ":" > 
 | < AP : "(" >
 | < CP : ")" >
 | < CO : "," >
}


void Program() :
{ System.out.println("Iniciando revision del programa"); 
  s = "#include <iostream>\n#include \"Robot.h\"\nint main(){\n Robot r1();\n r1.connect();\n";}
{
  ( FUNC() | COND() | LOOP() )+
  {
  s+= "r1.exit(); \n }";

  try {

      File file = new File("res.txt");

      // if file doesnt exists, then create it
      if (!file.exists()) {
        file.createNewFile();
      }

      FileWriter fw = new FileWriter(file.getAbsoluteFile());
      BufferedWriter bw = new BufferedWriter(fw);
      bw.write(s);
      bw.close();

      System.out.println("Done");

    } catch (IOException e) {
      e.printStackTrace();
    }
  }

}

void FUNC() :
{ System.out.println("Una función"); 
  Token n, g = null;
  int num;}
{
  (<AV><AP> n = <ENTERO> <CP>
  {
    num = Integer.parseInt(n.image);
    if (num > 500)
      System.out.println("Warning: Distance should be under 500.\n");
    s += "r1.lock();\nr1.move(" + num*10 + ");\nunlock();\n";
  }
  | <RET><AP> n=<ENTERO> <CP>
  {
    num = Integer.parseInt(n.image);
    if (num > 500)
      System.out.println("Warning: Distance should be under 500.\n");
    s += "r1.lock();\nr1.move(-" + num*10 + ");\nunlock();\n";
  }
  | <GIR><AP> n= <ENTERO><CO> ( g= <IZQ> | g= <DER> ) <CP>) 
  {
    num = Integer.parseInt(n.image);
    if (num > 180 || num < 0){
      System.out.println("Error: Angle should be between 0 and 180 degrees.\n");
      System.exit(0);
      }
      if(g.image == "izquierda")
        s += "r1.lock();\nr1.setDeltaHeading(-" + n.image + ");\nunlock();\n";
      else
        s += "r1.lock();\nr1.setDeltaHeading(" + n.image + ");\nunlock();\n";
  }
}

void COND():
{ System.out.println("Una función"); 
  Token se, val, c;}
{
  <SI>
  ( se= <V1>
  | se= <V2>
  | se= <V3>)
  ( c=<MAQ> | c=<MEQ> )
  val=<ENTERO> <ENT> 
  {
    int num = Integer.parseInt(val.image);
    if(num < 30 || num > 500){
      System.out.println("Error: Cant compare a sensor value with values less than 30 or greater than 500.\n");
      System.exit(0);
    }
    s+= "int " + se.image + " = r1.read(sonar";
    switch(se.image){
    case "s1":
      s+= "1";
      break;
    case "s2":
      s+= "2";
      break;
    case "s3":
      s+= "3";
      break;
    }
    s+= "if (" + se.image + c.image + "){\n";
  }
  (FUNC() | COND() | LOOP() )+ <FIN>
  {
    s+= "}\n";
  }
}

void LOOP():
{ System.out.println("Una función"); 
Token i;}
{
  <REP> i=<ENTERO><VEC><DP>
  {
    s+= "for(int i = 0; i < " + i.image + "; i++){\n";
  }
  (FUNC() | COND() | LOOP() )+ <FIN>
  {
    s+= "}\n";
  }
}